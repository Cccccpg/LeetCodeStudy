package Offer;

import java.util.ArrayList;

public class Offer62 {

    /**
     * 约瑟夫环问题
     * 0,1,···,n-1这n个数字排成一个圆圈，从数字0开始
     * 每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。
     * 求出这个圆圈里剩下的最后一个数字。
     *
     * 递推公式：F(N, M) = (F(N - 1, M) + M) % N
     * F(N, M)：表示N个人报数，每次到M时删掉那个数，最终留下数的编号
     * F(N - 1, M)：表示N - 1个人报数，每次到M时删掉那个数，最终留下数的编号
     * 每删掉一个数，其实就是把这个数组向前移动了M位，然后逆过来就得到了这个递推式
     *
     * 0 1 2 3 4
     * 3 4 0 1
     * 1 3 4
     * 1 3
     * 3
     *
     * 要使用的数学方法，就是从结果0号位置，反推最开始在哪
     * 从第二次，向上看第一次
     * 会发现，原来3在0的位置
     *       现在，3在(0 + 3) % 5
     *            => +3 回到上次的位置
     *            => %5 防止数组溢出，并且数组本来就是循环数组
     *
     * 输入: n = 5, m = 3
     * 输出: 3
     *
     * @param n
     * @param m
     * @return
     */

    public int lastRemaining(int n, int m) {
        int ans = 0;
        for (int i = 2; i <= n; i++){
            ans = (ans + m) % i;
        }
        return ans;
    }
}
